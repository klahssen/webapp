// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auth.proto

package domain

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Action int32

const (
	Action_ACCOUNTS_CREATE        Action = 0
	Action_ACCOUNTS_UPDATE_EMAIL  Action = 1
	Action_ACCOUNTS_UPDATE_PW     Action = 2
	Action_ACCOUNTS_UPDATE_STATUS Action = 3
	Action_ACCOUNTS_UPDATE_TYPE   Action = 4
)

var Action_name = map[int32]string{
	0: "ACCOUNTS_CREATE",
	1: "ACCOUNTS_UPDATE_EMAIL",
	2: "ACCOUNTS_UPDATE_PW",
	3: "ACCOUNTS_UPDATE_STATUS",
	4: "ACCOUNTS_UPDATE_TYPE",
}

var Action_value = map[string]int32{
	"ACCOUNTS_CREATE":        0,
	"ACCOUNTS_UPDATE_EMAIL":  1,
	"ACCOUNTS_UPDATE_PW":     2,
	"ACCOUNTS_UPDATE_STATUS": 3,
	"ACCOUNTS_UPDATE_TYPE":   4,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{0}
}

//AuthParams holds payload to check authorization
type AuthParams struct {
	Action Action `protobuf:"varint,1,opt,name=action,proto3,enum=domain.Action" json:"action" db:"action"`
	Owner  string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner" db:"owner"`
}

func (m *AuthParams) Reset()         { *m = AuthParams{} }
func (m *AuthParams) String() string { return proto.CompactTextString(m) }
func (*AuthParams) ProtoMessage()    {}
func (*AuthParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{0}
}
func (m *AuthParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthParams.Merge(m, src)
}
func (m *AuthParams) XXX_Size() int {
	return m.Size()
}
func (m *AuthParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthParams.DiscardUnknown(m)
}

var xxx_messageInfo_AuthParams proto.InternalMessageInfo

func (m *AuthParams) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_ACCOUNTS_CREATE
}

func (m *AuthParams) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type AuthResp struct {
	Authorized bool `protobuf:"varint,1,opt,name=authorized,proto3" json:"authorized" db:"authorized"`
}

func (m *AuthResp) Reset()         { *m = AuthResp{} }
func (m *AuthResp) String() string { return proto.CompactTextString(m) }
func (*AuthResp) ProtoMessage()    {}
func (*AuthResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{1}
}
func (m *AuthResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResp.Merge(m, src)
}
func (m *AuthResp) XXX_Size() int {
	return m.Size()
}
func (m *AuthResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResp.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResp proto.InternalMessageInfo

func (m *AuthResp) GetAuthorized() bool {
	if m != nil {
		return m.Authorized
	}
	return false
}

type AccessToken struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token" db:"token"`
}

func (m *AccessToken) Reset()         { *m = AccessToken{} }
func (m *AccessToken) String() string { return proto.CompactTextString(m) }
func (*AccessToken) ProtoMessage()    {}
func (*AccessToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{2}
}
func (m *AccessToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessToken.Merge(m, src)
}
func (m *AccessToken) XXX_Size() int {
	return m.Size()
}
func (m *AccessToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessToken.DiscardUnknown(m)
}

var xxx_messageInfo_AccessToken proto.InternalMessageInfo

func (m *AccessToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Permissions struct {
	Uid           string        `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid" db:"uid"`
	AccountType   AccountType   `protobuf:"varint,2,opt,name=account_type,json=type,proto3,enum=domain.AccountType" json:"type" db:"type"`
	AccountStatus AccountStatus `protobuf:"varint,3,opt,name=account_status,json=status,proto3,enum=domain.AccountStatus" json:"status" db:"status"`
	Permissions   []string      `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions" db:"permissions"`
}

func (m *Permissions) Reset()         { *m = Permissions{} }
func (m *Permissions) String() string { return proto.CompactTextString(m) }
func (*Permissions) ProtoMessage()    {}
func (*Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{3}
}
func (m *Permissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Permissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Permissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Permissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permissions.Merge(m, src)
}
func (m *Permissions) XXX_Size() int {
	return m.Size()
}
func (m *Permissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Permissions.DiscardUnknown(m)
}

var xxx_messageInfo_Permissions proto.InternalMessageInfo

func (m *Permissions) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Permissions) GetAccountType() AccountType {
	if m != nil {
		return m.AccountType
	}
	return AccountType_USER
}

func (m *Permissions) GetAccountStatus() AccountStatus {
	if m != nil {
		return m.AccountStatus
	}
	return AccountStatus_CREATED
}

func (m *Permissions) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func init() {
	proto.RegisterEnum("domain.Action", Action_name, Action_value)
	proto.RegisterType((*AuthParams)(nil), "domain.AuthParams")
	proto.RegisterType((*AuthResp)(nil), "domain.AuthResp")
	proto.RegisterType((*AccessToken)(nil), "domain.AccessToken")
	proto.RegisterType((*Permissions)(nil), "domain.Permissions")
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor_8bbd6f3875b0e874) }

var fileDescriptor_8bbd6f3875b0e874 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0x75, 0x54, 0x9b, 0x3b, 0xba, 0xc8, 0x63, 0xa3, 0xeb, 0x21, 0xde, 0x8c, 0x90,
	0x26, 0xa4, 0xb5, 0xd2, 0xe0, 0x34, 0xb8, 0x38, 0x23, 0xa0, 0x49, 0x0c, 0xa2, 0x34, 0x13, 0x82,
	0x4b, 0x95, 0xa6, 0xa6, 0x8d, 0x46, 0xe3, 0xa8, 0x4e, 0x34, 0x95, 0x03, 0x12, 0x17, 0xce, 0x5c,
	0xf8, 0x9f, 0x38, 0xee, 0xc8, 0xc9, 0x42, 0xed, 0x2d, 0xc7, 0xfc, 0x05, 0x28, 0x76, 0x9a, 0x45,
	0xbd, 0xf9, 0xfb, 0x79, 0x3f, 0xfc, 0xfc, 0xde, 0x33, 0x00, 0x5e, 0x12, 0x4f, 0xba, 0xd1, 0x8c,
	0xc5, 0x0c, 0x36, 0x46, 0x6c, 0xea, 0x05, 0x61, 0xe7, 0x74, 0x1c, 0xc4, 0x93, 0x64, 0xd8, 0xf5,
	0xd9, 0xb4, 0x37, 0x66, 0x63, 0xd6, 0x93, 0xe6, 0x61, 0xf2, 0x45, 0x2a, 0x29, 0xe4, 0x49, 0x85,
	0x75, 0x5a, 0x9e, 0xef, 0xb3, 0x24, 0x8c, 0xb9, 0xd2, 0xf8, 0x3b, 0x00, 0x24, 0x89, 0x27, 0xb6,
	0x37, 0xf3, 0xa6, 0x1c, 0x12, 0xd0, 0xf0, 0xfc, 0x38, 0x60, 0x61, 0x5b, 0x3b, 0xd2, 0x4e, 0x5a,
	0x67, 0xad, 0xae, 0xba, 0xa5, 0x4b, 0x24, 0x35, 0x0f, 0x53, 0x81, 0x0a, 0x8f, 0x4c, 0xa0, 0xe6,
	0x68, 0x78, 0x8e, 0x95, 0xc2, 0x4e, 0x81, 0xe1, 0x29, 0x78, 0xc0, 0x6e, 0x43, 0x3a, 0x6b, 0x6f,
	0x1c, 0x69, 0x27, 0xdb, 0xe6, 0xe3, 0x54, 0x20, 0x05, 0x32, 0x81, 0x40, 0x1e, 0x20, 0x05, 0x76,
	0x14, 0xc4, 0x57, 0x60, 0x2b, 0xbf, 0xdf, 0xa1, 0x3c, 0x82, 0x44, 0x3d, 0x90, 0xcd, 0x82, 0x6f,
	0x74, 0x24, 0x2b, 0xd8, 0x32, 0x8f, 0x53, 0x81, 0x2a, 0x34, 0x13, 0x68, 0x57, 0xde, 0x5a, 0x12,
	0xec, 0x54, 0xcc, 0xf8, 0x15, 0x68, 0x12, 0xdf, 0xa7, 0x9c, 0xbb, 0xec, 0x86, 0xca, 0x62, 0xe2,
	0xfc, 0x20, 0x93, 0x15, 0xc5, 0x48, 0xb0, 0x2a, 0x46, 0x0a, 0xec, 0x28, 0x88, 0x7f, 0x6f, 0x80,
	0xa6, 0x4d, 0x67, 0xd3, 0x80, 0xf3, 0x80, 0x85, 0x1c, 0x3e, 0x05, 0xf5, 0x24, 0x18, 0x15, 0xc1,
	0x7b, 0xa9, 0x40, 0xb9, 0xcc, 0x04, 0xda, 0xca, 0x43, 0x93, 0x60, 0x84, 0x9d, 0x1c, 0xc0, 0x37,
	0x60, 0xa7, 0xe8, 0xea, 0x20, 0x9e, 0x47, 0x54, 0xbe, 0xbc, 0x75, 0xb6, 0x77, 0xdf, 0x3b, 0x69,
	0x73, 0xe7, 0x11, 0x35, 0xf7, 0x53, 0x81, 0x36, 0x73, 0xa7, 0x4c, 0xa0, 0x6d, 0x59, 0xc0, 0x3c,
	0xa2, 0xd8, 0x91, 0x08, 0xda, 0x60, 0x35, 0x9d, 0x01, 0x8f, 0xbd, 0x38, 0xe1, 0xed, 0xba, 0xcc,
	0xb4, 0xbf, 0x96, 0xa9, 0x2f, 0x8d, 0x6a, 0x18, 0xca, 0x71, 0x35, 0x0c, 0xa5, 0xb0, 0x53, 0x60,
	0x68, 0x81, 0x66, 0x74, 0xff, 0x9e, 0xf6, 0xe6, 0x51, 0xfd, 0x64, 0xdb, 0x7c, 0x92, 0x0a, 0x54,
	0xc5, 0x99, 0x40, 0x7a, 0x1e, 0x5c, 0x41, 0xd8, 0xa9, 0x3a, 0x3c, 0xfb, 0xa9, 0x81, 0x86, 0xda,
	0x00, 0xb8, 0x07, 0x76, 0xc9, 0xc5, 0xc5, 0x87, 0xeb, 0xf7, 0x6e, 0x7f, 0x70, 0xe1, 0x58, 0xc4,
	0xb5, 0xf4, 0x1a, 0x3c, 0x04, 0xfb, 0x25, 0xbc, 0xb6, 0x5f, 0x13, 0xd7, 0x1a, 0x58, 0x57, 0xe4,
	0xf2, 0x9d, 0xae, 0xc1, 0x03, 0x00, 0xd7, 0x4d, 0xf6, 0x47, 0x7d, 0x03, 0x76, 0xc0, 0xc1, 0x3a,
	0xef, 0xbb, 0xc4, 0xbd, 0xee, 0xeb, 0x75, 0xd8, 0x06, 0x8f, 0xd6, 0x6d, 0xee, 0x27, 0xdb, 0xd2,
	0x37, 0xcf, 0x7e, 0x68, 0xe0, 0x21, 0x29, 0xa6, 0xed, 0xc9, 0x7a, 0x5e, 0x80, 0x9d, 0x4b, 0x4e,
	0xca, 0x05, 0x80, 0xb0, 0xec, 0x55, 0xb9, 0xd5, 0x1d, 0xbd, 0xca, 0xe4, 0xa6, 0x9d, 0x83, 0xd6,
	0x5b, 0x1a, 0x57, 0x47, 0x5d, 0x9d, 0xd6, 0x6a, 0x7d, 0x3a, 0x25, 0xac, 0x78, 0x9a, 0x2f, 0xff,
	0x2c, 0x0c, 0xed, 0x6e, 0x61, 0x68, 0xff, 0x16, 0x86, 0xf6, 0x6b, 0x69, 0xd4, 0xee, 0x96, 0x46,
	0xed, 0xef, 0xd2, 0xa8, 0x7d, 0x3e, 0xae, 0x7c, 0xc5, 0x9b, 0xaf, 0xde, 0x84, 0x73, 0x1a, 0xf6,
	0x6e, 0xe9, 0xd0, 0x8b, 0xa2, 0x9e, 0x4a, 0x34, 0x6c, 0xc8, 0x5f, 0xf7, 0xfc, 0x7f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb4, 0xd6, 0x29, 0x92, 0xca, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizationClient interface {
	IsAuthorized(ctx context.Context, in *AuthParams, opts ...grpc.CallOption) (*AuthResp, error)
	GetPermissions(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Permissions, error)
}

type authorizationClient struct {
	cc *grpc.ClientConn
}

func NewAuthorizationClient(cc *grpc.ClientConn) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) IsAuthorized(ctx context.Context, in *AuthParams, opts ...grpc.CallOption) (*AuthResp, error) {
	out := new(AuthResp)
	err := c.cc.Invoke(ctx, "/domain.Authorization/IsAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetPermissions(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, "/domain.Authorization/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
type AuthorizationServer interface {
	IsAuthorized(context.Context, *AuthParams) (*AuthResp, error)
	GetPermissions(context.Context, *AccessToken) (*Permissions, error)
}

func RegisterAuthorizationServer(s *grpc.Server, srv AuthorizationServer) {
	s.RegisterService(&_Authorization_serviceDesc, srv)
}

func _Authorization_IsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).IsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Authorization/IsAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).IsAuthorized(ctx, req.(*AuthParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Authorization/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetPermissions(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domain.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthorized",
			Handler:    _Authorization_IsAuthorized_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _Authorization_GetPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

func (m *AuthParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.Action))
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	return i, nil
}

func (m *AuthResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Authorized {
		dAtA[i] = 0x8
		i++
		if m.Authorized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AccessToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *Permissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permissions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuth(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if m.AccountType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.AccountType))
	}
	if m.AccountStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAuth(dAtA, i, uint64(m.AccountStatus))
	}
	if len(m.Permissions) > 0 {
		for _, s := range m.Permissions {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintAuth(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AuthParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovAuth(uint64(m.Action))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *AuthResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authorized {
		n += 2
	}
	return n
}

func (m *AccessToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	return n
}

func (m *Permissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAuth(uint64(l))
	}
	if m.AccountType != 0 {
		n += 1 + sovAuth(uint64(m.AccountType))
	}
	if m.AccountStatus != 0 {
		n += 1 + sovAuth(uint64(m.AccountStatus))
	}
	if len(m.Permissions) > 0 {
		for _, s := range m.Permissions {
			l = len(s)
			n += 1 + l + sovAuth(uint64(l))
		}
	}
	return n
}

func sovAuth(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuth(x uint64) (n int) {
	return sovAuth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Authorized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= AccountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountStatus", wireType)
			}
			m.AccountStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountStatus |= AccountStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuth
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAuth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuth(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAuth
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuth   = fmt.Errorf("proto: integer overflow")
)
