// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emails.proto

package domain

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//EmailParams holds payload to send an email
type EmailParams struct {
	Em   string `protobuf:"bytes,1,opt,name=em,proto3" json:"em" db:"em"`
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang" db:"lang"`
}

func (m *EmailParams) Reset()         { *m = EmailParams{} }
func (m *EmailParams) String() string { return proto.CompactTextString(m) }
func (*EmailParams) ProtoMessage()    {}
func (*EmailParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee0b3a5d3524f34c, []int{0}
}
func (m *EmailParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmailParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmailParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailParams.Merge(m, src)
}
func (m *EmailParams) XXX_Size() int {
	return m.Size()
}
func (m *EmailParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailParams.DiscardUnknown(m)
}

var xxx_messageInfo_EmailParams proto.InternalMessageInfo

func (m *EmailParams) GetEm() string {
	if m != nil {
		return m.Em
	}
	return ""
}

func (m *EmailParams) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

type EmailResp struct {
	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Server string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (m *EmailResp) Reset()         { *m = EmailResp{} }
func (m *EmailResp) String() string { return proto.CompactTextString(m) }
func (*EmailResp) ProtoMessage()    {}
func (*EmailResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee0b3a5d3524f34c, []int{1}
}
func (m *EmailResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmailResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmailResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailResp.Merge(m, src)
}
func (m *EmailResp) XXX_Size() int {
	return m.Size()
}
func (m *EmailResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailResp.DiscardUnknown(m)
}

var xxx_messageInfo_EmailResp proto.InternalMessageInfo

func (m *EmailResp) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *EmailResp) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func init() {
	proto.RegisterType((*EmailParams)(nil), "domain.EmailParams")
	proto.RegisterType((*EmailResp)(nil), "domain.EmailResp")
}

func init() { proto.RegisterFile("emails.proto", fileDescriptor_ee0b3a5d3524f34c) }

var fileDescriptor_ee0b3a5d3524f34c = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x9b, 0x7c, 0x9f, 0x82, 0x6a, 0x18, 0xa8, 0xf9, 0xa3, 0xaa, 0x43, 0x42, 0x33, 0xc1,
	0x40, 0x22, 0x81, 0x58, 0x28, 0x42, 0x6a, 0x11, 0x7b, 0x15, 0x36, 0x98, 0x9c, 0xfa, 0x36, 0x8d,
	0xa8, 0xe3, 0xc8, 0x4e, 0xe8, 0x6b, 0xf0, 0x4e, 0x2c, 0x8c, 0x1d, 0x99, 0x22, 0xd4, 0x6c, 0x1d,
	0xfb, 0x04, 0xc8, 0x37, 0x0c, 0x65, 0x83, 0xed, 0x9c, 0xe3, 0xfb, 0x3b, 0xb6, 0x75, 0xc9, 0x1e,
	0x08, 0x96, 0xce, 0x75, 0x90, 0x2b, 0x59, 0x48, 0xea, 0x70, 0x29, 0x58, 0x9a, 0xf5, 0xce, 0x93,
	0xb4, 0x98, 0x95, 0x71, 0x30, 0x91, 0x22, 0x4c, 0x64, 0x22, 0x43, 0x3c, 0x8e, 0xcb, 0x29, 0x3a,
	0x34, 0xa8, 0x1a, 0xcc, 0x7f, 0x22, 0xbb, 0xf7, 0xa6, 0x66, 0xcc, 0x14, 0x13, 0x9a, 0xf6, 0x89,
	0x0d, 0xa2, 0x6b, 0x9d, 0x58, 0xa7, 0xed, 0x51, 0x67, 0x5d, 0x79, 0x36, 0x88, 0x4d, 0xe5, 0xed,
	0xf0, 0xf8, 0xda, 0x07, 0xe1, 0x47, 0x36, 0x08, 0x7a, 0x46, 0xfe, 0xcf, 0x59, 0x96, 0x74, 0x6d,
	0x1c, 0x3a, 0x5a, 0x57, 0x1e, 0xfa, 0x4d, 0xe5, 0xb5, 0xcd, 0x98, 0xd1, 0x7e, 0x84, 0x91, 0x7f,
	0x45, 0xda, 0x58, 0x1e, 0x81, 0xce, 0xe9, 0x3e, 0xf9, 0x57, 0xa6, 0xbc, 0xe9, 0x8e, 0x8c, 0xa4,
	0xc7, 0xc4, 0xd1, 0xa0, 0x5e, 0x40, 0x35, 0x5d, 0xd1, 0xb7, 0xbb, 0x78, 0xb3, 0x88, 0x83, 0x9c,
	0xa6, 0x37, 0x84, 0x3e, 0x40, 0xc6, 0x87, 0x93, 0x89, 0x2c, 0xb3, 0xe2, 0x4e, 0x66, 0xd3, 0x54,
	0x09, 0x7a, 0x10, 0x34, 0x9f, 0x0d, 0xb6, 0x9e, 0xde, 0xeb, 0xfc, 0x08, 0xf1, 0xca, 0x5b, 0x72,
	0x68, 0x68, 0x0c, 0x86, 0x9c, 0xab, 0xbf, 0xf2, 0x03, 0xd2, 0x31, 0xfc, 0x98, 0x69, 0xbd, 0x90,
	0x8a, 0x47, 0xa0, 0xa1, 0xf8, 0x2d, 0x3c, 0x1a, 0xbc, 0xaf, 0x5c, 0x6b, 0xb9, 0x72, 0xad, 0xcf,
	0x95, 0x6b, 0xbd, 0xd6, 0x6e, 0x6b, 0x59, 0xbb, 0xad, 0x8f, 0xda, 0x6d, 0x3d, 0xf6, 0xb7, 0x56,
	0xf4, 0x3c, 0x67, 0x33, 0xad, 0x21, 0x0b, 0x17, 0x10, 0xb3, 0x3c, 0x0f, 0x9b, 0x9a, 0xd8, 0xc1,
	0xed, 0x5c, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x7c, 0x77, 0xca, 0xe4, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmailsClient is the client API for Emails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmailsClient interface {
	SendAccountConfirm(ctx context.Context, in *EmailParams, opts ...grpc.CallOption) (*EmailResp, error)
	SendEmailAddrConfirm(ctx context.Context, in *EmailParams, opts ...grpc.CallOption) (*EmailResp, error)
	SendPasswordReset(ctx context.Context, in *EmailParams, opts ...grpc.CallOption) (*EmailResp, error)
}

type emailsClient struct {
	cc *grpc.ClientConn
}

func NewEmailsClient(cc *grpc.ClientConn) EmailsClient {
	return &emailsClient{cc}
}

func (c *emailsClient) SendAccountConfirm(ctx context.Context, in *EmailParams, opts ...grpc.CallOption) (*EmailResp, error) {
	out := new(EmailResp)
	err := c.cc.Invoke(ctx, "/domain.Emails/SendAccountConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsClient) SendEmailAddrConfirm(ctx context.Context, in *EmailParams, opts ...grpc.CallOption) (*EmailResp, error) {
	out := new(EmailResp)
	err := c.cc.Invoke(ctx, "/domain.Emails/SendEmailAddrConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailsClient) SendPasswordReset(ctx context.Context, in *EmailParams, opts ...grpc.CallOption) (*EmailResp, error) {
	out := new(EmailResp)
	err := c.cc.Invoke(ctx, "/domain.Emails/SendPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailsServer is the server API for Emails service.
type EmailsServer interface {
	SendAccountConfirm(context.Context, *EmailParams) (*EmailResp, error)
	SendEmailAddrConfirm(context.Context, *EmailParams) (*EmailResp, error)
	SendPasswordReset(context.Context, *EmailParams) (*EmailResp, error)
}

func RegisterEmailsServer(s *grpc.Server, srv EmailsServer) {
	s.RegisterService(&_Emails_serviceDesc, srv)
}

func _Emails_SendAccountConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).SendAccountConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Emails/SendAccountConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).SendAccountConfirm(ctx, req.(*EmailParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emails_SendEmailAddrConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).SendEmailAddrConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Emails/SendEmailAddrConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).SendEmailAddrConfirm(ctx, req.(*EmailParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emails_SendPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailsServer).SendPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Emails/SendPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailsServer).SendPasswordReset(ctx, req.(*EmailParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Emails_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domain.Emails",
	HandlerType: (*EmailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAccountConfirm",
			Handler:    _Emails_SendAccountConfirm_Handler,
		},
		{
			MethodName: "SendEmailAddrConfirm",
			Handler:    _Emails_SendEmailAddrConfirm_Handler,
		},
		{
			MethodName: "SendPasswordReset",
			Handler:    _Emails_SendPasswordReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emails.proto",
}

func (m *EmailParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Em) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEmails(dAtA, i, uint64(len(m.Em)))
		i += copy(dAtA[i:], m.Em)
	}
	if len(m.Lang) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEmails(dAtA, i, uint64(len(m.Lang)))
		i += copy(dAtA[i:], m.Lang)
	}
	return i, nil
}

func (m *EmailResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEmails(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Server) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEmails(dAtA, i, uint64(len(m.Server)))
		i += copy(dAtA[i:], m.Server)
	}
	return i, nil
}

func encodeVarintEmails(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EmailParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Em)
	if l > 0 {
		n += 1 + l + sovEmails(uint64(l))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovEmails(uint64(l))
	}
	return n
}

func (m *EmailResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovEmails(uint64(l))
	}
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovEmails(uint64(l))
	}
	return n
}

func sovEmails(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEmails(x uint64) (n int) {
	return sovEmails(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmailParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Em", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Em = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmails
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmails
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmails
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmails
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmails(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEmails
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEmails
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEmails(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEmails
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmails
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmails
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEmails
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEmails
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEmails
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEmails(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEmails
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEmails = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEmails   = fmt.Errorf("proto: integer overflow")
)
