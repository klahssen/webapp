// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: accounts.proto

package domain

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//AccountType is an authorization criteria
type AccountType int32

const (
	AccountType_USER  AccountType = 0
	AccountType_ADMIN AccountType = 1
	AccountType_DEV   AccountType = 2
)

var AccountType_name = map[int32]string{
	0: "USER",
	1: "ADMIN",
	2: "DEV",
}

var AccountType_value = map[string]int32{
	"USER":  0,
	"ADMIN": 1,
	"DEV":   2,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e1e7723af4c007b7, []int{0}
}

//AccountStatus is an authorization criteria
type AccountStatus int32

const (
	AccountStatus_CREATED  AccountStatus = 0
	AccountStatus_ACTIVE   AccountStatus = 1
	AccountStatus_LOCKED   AccountStatus = 2
	AccountStatus_INACTIVE AccountStatus = 3
	AccountStatus_DELETED  AccountStatus = 4
)

var AccountStatus_name = map[int32]string{
	0: "CREATED",
	1: "ACTIVE",
	2: "LOCKED",
	3: "INACTIVE",
	4: "DELETED",
}

var AccountStatus_value = map[string]int32{
	"CREATED":  0,
	"ACTIVE":   1,
	"LOCKED":   2,
	"INACTIVE": 3,
	"DELETED":  4,
}

func (x AccountStatus) String() string {
	return proto.EnumName(AccountStatus_name, int32(x))
}

func (AccountStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e1e7723af4c007b7, []int{1}
}

//AccountEntity (timestamps in seconds)
type AccountEntity struct {
	// `datastore:"-"`
	Uid           string        `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid" db:"uid"`
	Em            string        `protobuf:"bytes,3,opt,name=em,json=email,proto3" json:"email" db:"email"`
	Pw            string        `protobuf:"bytes,4,opt,name=pw,json=-,proto3" json:"-" db:"pw"`
	CreatedAt     int64         `protobuf:"varint,5,opt,name=created_at,json=crea_at,proto3" json:"crea_at" db:"crea_at"`
	UpdatedAt     int64         `protobuf:"varint,6,opt,name=updated_at,json=upd_at,proto3" json:"upd_at" db:"upd_at"`
	Type          AccountType   `protobuf:"varint,7,opt,name=type,proto3,enum=domain.AccountType" json:"type" db:"type"`
	Status        AccountStatus `protobuf:"varint,8,opt,name=status,proto3,enum=domain.AccountStatus" json:"status" db:"status"`
	ParentAccount string        `protobuf:"bytes,9,opt,name=parent_account,json=parent,proto3" json:"parent" db:"parent"`
}

func (m *AccountEntity) Reset()         { *m = AccountEntity{} }
func (m *AccountEntity) String() string { return proto.CompactTextString(m) }
func (*AccountEntity) ProtoMessage()    {}
func (*AccountEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1e7723af4c007b7, []int{0}
}
func (m *AccountEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountEntity.Merge(m, src)
}
func (m *AccountEntity) XXX_Size() int {
	return m.Size()
}
func (m *AccountEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountEntity.DiscardUnknown(m)
}

var xxx_messageInfo_AccountEntity proto.InternalMessageInfo

func (m *AccountEntity) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *AccountEntity) GetEm() string {
	if m != nil {
		return m.Em
	}
	return ""
}

func (m *AccountEntity) GetPw() string {
	if m != nil {
		return m.Pw
	}
	return ""
}

func (m *AccountEntity) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *AccountEntity) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *AccountEntity) GetType() AccountType {
	if m != nil {
		return m.Type
	}
	return AccountType_USER
}

func (m *AccountEntity) GetStatus() AccountStatus {
	if m != nil {
		return m.Status
	}
	return AccountStatus_CREATED
}

func (m *AccountEntity) GetParentAccount() string {
	if m != nil {
		return m.ParentAccount
	}
	return ""
}

type AccountID struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AccountID) Reset()         { *m = AccountID{} }
func (m *AccountID) String() string { return proto.CompactTextString(m) }
func (*AccountID) ProtoMessage()    {}
func (*AccountID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1e7723af4c007b7, []int{1}
}
func (m *AccountID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountID.Merge(m, src)
}
func (m *AccountID) XXX_Size() int {
	return m.Size()
}
func (m *AccountID) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountID.DiscardUnknown(m)
}

var xxx_messageInfo_AccountID proto.InternalMessageInfo

func (m *AccountID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

//AccountParams holds payload to create/update an Account
type AccountParams struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Em  string `protobuf:"bytes,2,opt,name=em,proto3" json:"em,omitempty"`
	Pw  string `protobuf:"bytes,3,opt,name=pw,proto3" json:"pw,omitempty"`
}

func (m *AccountParams) Reset()         { *m = AccountParams{} }
func (m *AccountParams) String() string { return proto.CompactTextString(m) }
func (*AccountParams) ProtoMessage()    {}
func (*AccountParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1e7723af4c007b7, []int{2}
}
func (m *AccountParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountParams.Merge(m, src)
}
func (m *AccountParams) XXX_Size() int {
	return m.Size()
}
func (m *AccountParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountParams.DiscardUnknown(m)
}

var xxx_messageInfo_AccountParams proto.InternalMessageInfo

func (m *AccountParams) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *AccountParams) GetEm() string {
	if m != nil {
		return m.Em
	}
	return ""
}

func (m *AccountParams) GetPw() string {
	if m != nil {
		return m.Pw
	}
	return ""
}

//AccountResp holds response for Account creation or update
type AccountResp struct {
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *AccountResp) Reset()         { *m = AccountResp{} }
func (m *AccountResp) String() string { return proto.CompactTextString(m) }
func (*AccountResp) ProtoMessage()    {}
func (*AccountResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1e7723af4c007b7, []int{3}
}
func (m *AccountResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountResp.Merge(m, src)
}
func (m *AccountResp) XXX_Size() int {
	return m.Size()
}
func (m *AccountResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountResp.DiscardUnknown(m)
}

var xxx_messageInfo_AccountResp proto.InternalMessageInfo

func (m *AccountResp) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

//AccountJwtTokens holds authentication tokens
type AccountJwtTokens struct {
	Access  string `protobuf:"bytes,1,opt,name=access,proto3" json:"access,omitempty"`
	Refresh string `protobuf:"bytes,2,opt,name=refresh,proto3" json:"refresh,omitempty"`
}

func (m *AccountJwtTokens) Reset()         { *m = AccountJwtTokens{} }
func (m *AccountJwtTokens) String() string { return proto.CompactTextString(m) }
func (*AccountJwtTokens) ProtoMessage()    {}
func (*AccountJwtTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1e7723af4c007b7, []int{4}
}
func (m *AccountJwtTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountJwtTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountJwtTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountJwtTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountJwtTokens.Merge(m, src)
}
func (m *AccountJwtTokens) XXX_Size() int {
	return m.Size()
}
func (m *AccountJwtTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountJwtTokens.DiscardUnknown(m)
}

var xxx_messageInfo_AccountJwtTokens proto.InternalMessageInfo

func (m *AccountJwtTokens) GetAccess() string {
	if m != nil {
		return m.Access
	}
	return ""
}

func (m *AccountJwtTokens) GetRefresh() string {
	if m != nil {
		return m.Refresh
	}
	return ""
}

//AccountCredentials holds credentials to authenticate a user
type AccountCredentials struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Pw string `protobuf:"bytes,2,opt,name=pw,proto3" json:"pw,omitempty"`
}

func (m *AccountCredentials) Reset()         { *m = AccountCredentials{} }
func (m *AccountCredentials) String() string { return proto.CompactTextString(m) }
func (*AccountCredentials) ProtoMessage()    {}
func (*AccountCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1e7723af4c007b7, []int{5}
}
func (m *AccountCredentials) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountCredentials.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountCredentials.Merge(m, src)
}
func (m *AccountCredentials) XXX_Size() int {
	return m.Size()
}
func (m *AccountCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_AccountCredentials proto.InternalMessageInfo

func (m *AccountCredentials) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountCredentials) GetPw() string {
	if m != nil {
		return m.Pw
	}
	return ""
}

//AccountParams holds payload to create/update an Account
type AccountPrivileges struct {
	Uid    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *AccountPrivileges) Reset()         { *m = AccountPrivileges{} }
func (m *AccountPrivileges) String() string { return proto.CompactTextString(m) }
func (*AccountPrivileges) ProtoMessage()    {}
func (*AccountPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_e1e7723af4c007b7, []int{6}
}
func (m *AccountPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPrivileges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPrivileges.Merge(m, src)
}
func (m *AccountPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *AccountPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPrivileges proto.InternalMessageInfo

func (m *AccountPrivileges) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *AccountPrivileges) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AccountPrivileges) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterEnum("domain.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("domain.AccountStatus", AccountStatus_name, AccountStatus_value)
	proto.RegisterType((*AccountEntity)(nil), "domain.AccountEntity")
	proto.RegisterType((*AccountID)(nil), "domain.AccountID")
	proto.RegisterType((*AccountParams)(nil), "domain.AccountParams")
	proto.RegisterType((*AccountResp)(nil), "domain.AccountResp")
	proto.RegisterType((*AccountJwtTokens)(nil), "domain.AccountJwtTokens")
	proto.RegisterType((*AccountCredentials)(nil), "domain.AccountCredentials")
	proto.RegisterType((*AccountPrivileges)(nil), "domain.AccountPrivileges")
}

func init() { proto.RegisterFile("accounts.proto", fileDescriptor_e1e7723af4c007b7) }

var fileDescriptor_e1e7723af4c007b7 = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x4e, 0xe3, 0x56,
	0x14, 0x8e, 0xed, 0xe0, 0x24, 0x27, 0x69, 0x64, 0x2e, 0x82, 0x9a, 0x20, 0xc5, 0xc8, 0x12, 0x12,
	0xa2, 0x22, 0x91, 0x28, 0x95, 0x4a, 0x55, 0x51, 0x25, 0xb1, 0xd5, 0xa6, 0xa5, 0xc0, 0x98, 0xc0,
	0x62, 0x36, 0xc8, 0x89, 0x2f, 0x89, 0x45, 0x12, 0x5b, 0xf6, 0xf5, 0x44, 0xbc, 0xc5, 0x3c, 0xc9,
	0xec, 0xe7, 0x0d, 0x66, 0xc9, 0x72, 0x56, 0xd6, 0x08, 0x76, 0x59, 0xe6, 0x09, 0x46, 0xf7, 0x27,
	0x11, 0xf2, 0xb0, 0x61, 0xe7, 0xef, 0x9c, 0xef, 0x3b, 0xbe, 0xe7, 0x7c, 0xe7, 0x5e, 0xa8, 0xba,
	0x83, 0x41, 0x90, 0x4c, 0x49, 0xdc, 0x08, 0xa3, 0x80, 0x04, 0x48, 0xf5, 0x82, 0x89, 0xeb, 0x4f,
	0x6b, 0x87, 0x43, 0x9f, 0x8c, 0x92, 0x7e, 0x63, 0x10, 0x4c, 0x9a, 0xc3, 0x60, 0x18, 0x34, 0x59,
	0xba, 0x9f, 0xdc, 0x31, 0xc4, 0x00, 0xfb, 0xe2, 0x32, 0xf3, 0xb3, 0x02, 0x3f, 0xb5, 0x78, 0x25,
	0x7b, 0x4a, 0x7c, 0xf2, 0x80, 0xf6, 0x40, 0x49, 0x7c, 0x4f, 0x97, 0x76, 0xa5, 0xfd, 0x52, 0x7b,
	0x63, 0x9e, 0x1a, 0x14, 0x2e, 0x52, 0xa3, 0xe8, 0xf5, 0xff, 0x30, 0x13, 0xdf, 0x33, 0x1d, 0x1a,
	0x40, 0x07, 0x20, 0xe3, 0x89, 0xae, 0x30, 0xd6, 0xcf, 0xf3, 0xd4, 0x58, 0xc3, 0x13, 0xd7, 0x1f,
	0x2f, 0x52, 0x03, 0x28, 0x8f, 0x01, 0xd3, 0xe1, 0x41, 0x64, 0x80, 0x1c, 0xce, 0xf4, 0x3c, 0xe3,
	0x6a, 0xf3, 0xd4, 0x90, 0x0e, 0x17, 0xa9, 0x51, 0xa0, 0xbc, 0x70, 0x66, 0x3a, 0xd2, 0x21, 0xfa,
	0x1d, 0x60, 0x10, 0x61, 0x97, 0x60, 0xef, 0xd6, 0x25, 0xfa, 0xda, 0xae, 0xb4, 0xaf, 0xb4, 0x77,
	0xe6, 0xa9, 0x51, 0xa0, 0xd1, 0x5b, 0x97, 0x2c, 0x52, 0xa3, 0x42, 0xe9, 0x02, 0x9a, 0xce, 0x32,
	0x81, 0x7e, 0x03, 0x48, 0x42, 0x6f, 0xa9, 0x54, 0x99, 0x72, 0x7b, 0x9e, 0x1a, 0x6a, 0x12, 0x7a,
	0x5c, 0x58, 0x66, 0xe7, 0x66, 0xc8, 0x74, 0x44, 0x18, 0x9d, 0x42, 0x9e, 0x3c, 0x84, 0x58, 0x2f,
	0xec, 0x4a, 0xfb, 0xd5, 0xa3, 0x8d, 0x06, 0x1f, 0x5e, 0x43, 0x4c, 0xa2, 0xf7, 0x10, 0xe2, 0xf6,
	0xe6, 0x3c, 0x35, 0x18, 0x69, 0x91, 0x1a, 0x25, 0x5a, 0x83, 0x7e, 0x9b, 0x0e, 0x0b, 0xa1, 0x7f,
	0x40, 0x8d, 0x89, 0x4b, 0x92, 0x58, 0x2f, 0xb2, 0x0a, 0x9b, 0x99, 0x0a, 0x57, 0x2c, 0xc9, 0x4f,
	0xc2, 0x89, 0xcb, 0x93, 0x70, 0x64, 0x3a, 0x22, 0x8c, 0x4e, 0xa0, 0x1a, 0xba, 0x11, 0x9e, 0x92,
	0x5b, 0x61, 0xa8, 0x5e, 0x62, 0x73, 0x62, 0x52, 0x9e, 0x59, 0x4a, 0x39, 0x32, 0x1d, 0x11, 0x36,
	0x77, 0xa0, 0x24, 0x7e, 0xd7, 0xb5, 0x50, 0x15, 0xe4, 0xa5, 0x6b, 0x8e, 0xec, 0x7b, 0x66, 0x6b,
	0xe5, 0xeb, 0xa5, 0x1b, 0xb9, 0x93, 0x18, 0x69, 0x2f, 0x7c, 0xe5, 0x16, 0x56, 0x99, 0x85, 0x32,
	0x97, 0xe0, 0x09, 0xc5, 0xe1, 0x8c, 0x5b, 0xea, 0xc8, 0xe1, 0xcc, 0x34, 0xa0, 0x2c, 0x4a, 0x38,
	0x38, 0x0e, 0x7f, 0x2c, 0x60, 0x5a, 0xa0, 0x09, 0xc2, 0xbf, 0x33, 0xd2, 0x0b, 0xee, 0xf1, 0x34,
	0x46, 0x5b, 0xa0, 0xba, 0x83, 0x01, 0x8e, 0x63, 0x41, 0x14, 0x08, 0xe9, 0x50, 0x88, 0xf0, 0x5d,
	0x84, 0xe3, 0x91, 0xf8, 0xe3, 0x12, 0x9a, 0xc7, 0x80, 0x44, 0x95, 0x4e, 0x84, 0x3d, 0x3c, 0x25,
	0xbe, 0x3b, 0x8e, 0xb3, 0xfd, 0x88, 0xc3, 0xc9, 0xab, 0xc3, 0xbd, 0x83, 0xf5, 0x65, 0x7f, 0x91,
	0xff, 0xc1, 0x1f, 0xe3, 0x21, 0x7e, 0xad, 0x47, 0x24, 0x8c, 0xe6, 0x42, 0x6e, 0xde, 0xd6, 0xca,
	0x3c, 0xde, 0xab, 0x40, 0x07, 0xbf, 0xac, 0xfa, 0xa5, 0x0b, 0x80, 0x8a, 0x90, 0xbf, 0xbe, 0xb2,
	0x1d, 0x2d, 0x87, 0x4a, 0xb0, 0xd6, 0xb2, 0xfe, 0xef, 0x9e, 0x6b, 0x12, 0x2a, 0x80, 0x62, 0xd9,
	0x37, 0x9a, 0x7c, 0x70, 0xb1, 0x9a, 0x2f, 0xf7, 0x1a, 0x95, 0xa1, 0xd0, 0x71, 0xec, 0x56, 0xcf,
	0xb6, 0xb4, 0x1c, 0x02, 0x50, 0x5b, 0x9d, 0x5e, 0xf7, 0xc6, 0xd6, 0x24, 0xfa, 0x7d, 0x76, 0xd1,
	0xf9, 0xcf, 0xb6, 0x34, 0x19, 0x55, 0xa0, 0xd8, 0x3d, 0x17, 0x19, 0x85, 0x4a, 0x2c, 0xfb, 0xcc,
	0xa6, 0x92, 0xfc, 0xd1, 0x27, 0x05, 0x8a, 0xa2, 0x62, 0x8c, 0x8e, 0x41, 0xed, 0xb0, 0x0b, 0x81,
	0xb2, 0x9b, 0xc5, 0xdd, 0xac, 0x65, 0x57, 0x96, 0x39, 0x74, 0x02, 0xe5, 0x6b, 0x76, 0x19, 0x6c,
	0x76, 0xed, 0xde, 0x22, 0xfd, 0x13, 0xaa, 0x5c, 0x7a, 0xe9, 0xc6, 0xf1, 0x2c, 0x88, 0xbc, 0x37,
	0xaa, 0x81, 0xab, 0xd9, 0xe0, 0xb6, 0xb3, 0xca, 0x95, 0x41, 0xaf, 0xab, 0x4f, 0xa1, 0xc2, 0xd5,
	0x62, 0x92, 0x6f, 0xd5, 0x37, 0x41, 0xf9, 0x1b, 0x13, 0xb4, 0x9e, 0xc9, 0x75, 0xad, 0x5a, 0xb6,
	0x07, 0xf1, 0xc4, 0x59, 0x50, 0x69, 0x25, 0x64, 0x44, 0x57, 0x6d, 0x40, 0x67, 0x5c, 0xcb, 0xd0,
	0x5e, 0xec, 0x61, 0x4d, 0xcf, 0xe4, 0x56, 0x9b, 0xde, 0xfe, 0xeb, 0xcb, 0x53, 0x5d, 0x7a, 0x7c,
	0xaa, 0x4b, 0xdf, 0x9e, 0xea, 0xd2, 0xc7, 0xe7, 0x7a, 0xee, 0xf1, 0xb9, 0x9e, 0xfb, 0xfa, 0x5c,
	0xcf, 0xbd, 0xdf, 0x7b, 0xf1, 0x06, 0xdf, 0x8f, 0xdd, 0x51, 0x1c, 0xe3, 0x69, 0x73, 0x86, 0xfb,
	0x6e, 0x18, 0x36, 0xc3, 0xfb, 0x61, 0x93, 0x57, 0xec, 0xab, 0xec, 0x09, 0xfe, 0xf5, 0x7b, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x93, 0xd5, 0xee, 0xb3, 0xcb, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountsClient interface {
	Create(ctx context.Context, in *AccountParams, opts ...grpc.CallOption) (*AccountResp, error)
	UpdateEmail(ctx context.Context, in *AccountParams, opts ...grpc.CallOption) (*AccountResp, error)
	UpdatePassword(ctx context.Context, in *AccountParams, opts ...grpc.CallOption) (*AccountResp, error)
	UpdateType(ctx context.Context, in *AccountPrivileges, opts ...grpc.CallOption) (*AccountResp, error)
	UpdateStatus(ctx context.Context, in *AccountPrivileges, opts ...grpc.CallOption) (*AccountResp, error)
	Get(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*AccountEntity, error)
	Authenticate(ctx context.Context, in *AccountCredentials, opts ...grpc.CallOption) (*AccountJwtTokens, error)
}

type accountsClient struct {
	cc *grpc.ClientConn
}

func NewAccountsClient(cc *grpc.ClientConn) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) Create(ctx context.Context, in *AccountParams, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/domain.Accounts/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateEmail(ctx context.Context, in *AccountParams, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/domain.Accounts/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdatePassword(ctx context.Context, in *AccountParams, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/domain.Accounts/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateType(ctx context.Context, in *AccountPrivileges, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/domain.Accounts/UpdateType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateStatus(ctx context.Context, in *AccountPrivileges, opts ...grpc.CallOption) (*AccountResp, error) {
	out := new(AccountResp)
	err := c.cc.Invoke(ctx, "/domain.Accounts/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) Get(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*AccountEntity, error) {
	out := new(AccountEntity)
	err := c.cc.Invoke(ctx, "/domain.Accounts/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) Authenticate(ctx context.Context, in *AccountCredentials, opts ...grpc.CallOption) (*AccountJwtTokens, error) {
	out := new(AccountJwtTokens)
	err := c.cc.Invoke(ctx, "/domain.Accounts/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
type AccountsServer interface {
	Create(context.Context, *AccountParams) (*AccountResp, error)
	UpdateEmail(context.Context, *AccountParams) (*AccountResp, error)
	UpdatePassword(context.Context, *AccountParams) (*AccountResp, error)
	UpdateType(context.Context, *AccountPrivileges) (*AccountResp, error)
	UpdateStatus(context.Context, *AccountPrivileges) (*AccountResp, error)
	Get(context.Context, *AccountID) (*AccountEntity, error)
	Authenticate(context.Context, *AccountCredentials) (*AccountJwtTokens, error)
}

func RegisterAccountsServer(s *grpc.Server, srv AccountsServer) {
	s.RegisterService(&_Accounts_serviceDesc, srv)
}

func _Accounts_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Accounts/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Create(ctx, req.(*AccountParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Accounts/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateEmail(ctx, req.(*AccountParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Accounts/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdatePassword(ctx, req.(*AccountParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPrivileges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Accounts/UpdateType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateType(ctx, req.(*AccountPrivileges))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPrivileges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Accounts/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateStatus(ctx, req.(*AccountPrivileges))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Accounts/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Get(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Accounts/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Authenticate(ctx, req.(*AccountCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

var _Accounts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domain.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Accounts_Create_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _Accounts_UpdateEmail_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Accounts_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateType",
			Handler:    _Accounts_UpdateType_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Accounts_UpdateStatus_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Accounts_Get_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _Accounts_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts.proto",
}

func (m *AccountEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountEntity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Em) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Em)))
		i += copy(dAtA[i:], m.Em)
	}
	if len(m.Pw) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Pw)))
		i += copy(dAtA[i:], m.Pw)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(m.UpdatedAt))
	}
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(m.Type))
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(m.Status))
	}
	if len(m.ParentAccount) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.ParentAccount)))
		i += copy(dAtA[i:], m.ParentAccount)
	}
	return i, nil
}

func (m *AccountID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *AccountParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Em) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Em)))
		i += copy(dAtA[i:], m.Em)
	}
	if len(m.Pw) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Pw)))
		i += copy(dAtA[i:], m.Pw)
	}
	return i, nil
}

func (m *AccountResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	return i, nil
}

func (m *AccountJwtTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountJwtTokens) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Access) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Access)))
		i += copy(dAtA[i:], m.Access)
	}
	if len(m.Refresh) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Refresh)))
		i += copy(dAtA[i:], m.Refresh)
	}
	return i, nil
}

func (m *AccountCredentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountCredentials) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Pw) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Pw)))
		i += copy(dAtA[i:], m.Pw)
	}
	return i, nil
}

func (m *AccountPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPrivileges) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccounts(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func encodeVarintAccounts(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AccountEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	l = len(m.Em)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	l = len(m.Pw)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAccounts(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovAccounts(uint64(m.UpdatedAt))
	}
	if m.Type != 0 {
		n += 1 + sovAccounts(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovAccounts(uint64(m.Status))
	}
	l = len(m.ParentAccount)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	return n
}

func (m *AccountID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	return n
}

func (m *AccountParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	l = len(m.Em)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	l = len(m.Pw)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	return n
}

func (m *AccountResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	return n
}

func (m *AccountJwtTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Access)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	l = len(m.Refresh)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	return n
}

func (m *AccountCredentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	l = len(m.Pw)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	return n
}

func (m *AccountPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovAccounts(uint64(l))
	}
	return n
}

func sovAccounts(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAccounts(x uint64) (n int) {
	return sovAccounts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccounts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Em", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Em = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AccountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AccountStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccounts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccounts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccounts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccounts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Em", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Em = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccounts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccounts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccounts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountJwtTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccounts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountJwtTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountJwtTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Access", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Access = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refresh", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refresh = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccounts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountCredentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccounts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountCredentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountCredentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccounts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccounts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccounts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccounts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccounts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccounts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccounts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccounts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccounts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccounts
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAccounts
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAccounts
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAccounts(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAccounts
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAccounts = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccounts   = fmt.Errorf("proto: integer overflow")
)
