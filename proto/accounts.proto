syntax = "proto3";

package domain;
option go_package = "github.com/klahssen/webapp/domain";

//import "google/protobuf/timestamp.proto";
//import "google/protobuf/descriptor.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

//AccountType is an authorization criteria
enum AccountType {
	USER=0;
	ADMIN=1;
	DEV=2;
}
//AccountStatus is an authorization criteria
enum AccountStatus {
	CREATED=0; //when user signs up
	ACTIVE=1; //when account is validated
	LOCKED=2; //access (temporarly) disabled
	INACTIVE=3; //user wants to close account -> can only access the website via a specific reactivation endpoint
	DELETED=4; //user cant login and data for this user is not used/displayed anywhere (should remove all)
}

//AccountEntity (timestamps in seconds)
message AccountEntity {
	// `datastore:"-"`
	string uid=1 [json_name="uid", (gogoproto.jsontag)="uid", (gogoproto.moretags) = "db:\"uid\""];
	string em=3 [json_name="email", (gogoproto.jsontag)="email", (gogoproto.moretags) = "db:\"email\""];
	string pw=4 [json_name="-", (gogoproto.jsontag)="-", (gogoproto.moretags) = "db:\"pw\""];
	int64 created_at=5 [json_name="crea_at", (gogoproto.jsontag)="crea_at",  (gogoproto.moretags) = "db:\"crea_at\""];
	int64 updated_at=6 [json_name="upd_at", (gogoproto.jsontag)="upd_at",  (gogoproto.moretags) = "db:\"upd_at\""];
	AccountType type=7 [json_name="type", (gogoproto.jsontag)="type",  (gogoproto.moretags) = "db:\"type\""];
	AccountStatus status=8 [json_name="status", (gogoproto.jsontag)="status",  (gogoproto.moretags) = "db:\"status\""];
	string parent_account=9 [json_name="parent", (gogoproto.jsontag)="parent", (gogoproto.moretags) = "db:\"parent\""];
}

message AccountID {
	string id=1;
}

//AccountParams holds payload to create/update an Account
message AccountParams {
	string uid=1;
	string em=2;
	string pw=3;
}
//AccountResp holds response for Account creation or update
message AccountResp {
	string uid=1;
}

//AccountJwtTokens holds authentication tokens
message AccountJwtTokens {
	string access=1;
	string refresh=2;
}

//AccountCredentials holds credentials to authenticate a user
message AccountCredentials {
	string id=1;
	string pw=2;
}

//AccountParams holds payload to create/update an Account
message AccountPrivileges {
	string uid=1;
	string type=2;
	string status=3;
}

service Accounts {
	rpc Create(AccountParams) returns (AccountResp);
	rpc UpdateEmail(AccountParams) returns (AccountResp);
	rpc UpdatePassword(AccountParams) returns (AccountResp);
	rpc UpdateType(AccountPrivileges) returns (AccountResp);
	rpc UpdateStatus(AccountPrivileges) returns (AccountResp);
	rpc Get(AccountID) returns (AccountEntity);
	rpc Authenticate(AccountCredentials) returns (AccountJwtTokens);
}